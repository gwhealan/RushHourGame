import java.awt.*;
import java.awt.event.*;
import java.awt.BorderLayout;
import javax.swing.*;
import java.util.*;
import java.lang.Character;
public class RushHourFrame extends JFrame{
   private final Color CLEAR = new Color(0,0,0,0);
   private static final String[] levels ={
      "A(1,2)(2,2)",
      "A(1,2)(2,2) C(0,0)(1,0) T(0,1)(0,2)(0,3) C(0,4)(0,5) T(3,1)(3,2)(3,3) C(4,4)(4,5) T(5,0)(5,1)(5,2) T(2,5)(3,5)(4,5)",
      "A(1,2)(2,2) C(0,1)(0,2) C(2,0)(2,1) T(3,0)(4,0)(5,0) C(1,3)(1,4) C(0,4)(0,5) T(0,3)(0,4)(0,5) T(3,1)(3,2)(3,3) C(2,4)(3,4) T(1,5)(2,5)(3,5) C(4,1)(5,1) C(4,3)(5,3) C(5,4)(5,5)",
   };   
   
   private GameGrid game = new GameGrid(600);
   
   public RushHourFrame(){
      super.setSize(1100,700);
      super.setTitle("Rush Hour");
      super.setResizable(false);
      super.setDefaultCloseOperation(EXIT_ON_CLOSE);
      super.setLocationRelativeTo(null);
      super.setContentPane(new JLabel(new ImageIcon(getClass().getResource("background.png"))));
      super.setLayout(null);
      game.setLocation(48,32);
      super.add(game);
      super.add(createCommandWindow());
   }
   
   private JPanel createCommandWindow(){
      JPanel window = new JPanel(new BorderLayout());
      window.setBounds(747,100,300,533);
      JTextField prompter = createCommandPrompter();
      JTextArea history = createCommandHistory();
      prompter.addActionListener(
         ae -> {
            Scanner input = new Scanner(prompter.getText());
            String printer = " > Error: Action \"" + prompter.getText() + "\" not a command.";
            String command = input.next().toLowerCase();
            if(command.equals("setpos")){
               try{
                  int n = input.nextInt();
                  int pos = input.nextInt();
                  if(game.setPosition(n,pos)){
                     if(n == 0 && pos >= 4){
                        printer = " > YOU WIN!!\n> Vehicle " + n + "'s position set to " + pos + ".";
                     }else{
                        printer = " > Vehicle " + n + "'s position set to " + pos + "."; 
                     }
                     update();
                  }
               }catch(NoSuchElementException e){
                  printer = " > Error: Could not find value.";
               }
            }else if(command.equals("setlevel")){
               try{
                  game.setLevel(input.nextLine());
                  printer = " > Level set.";
                  update();
               }catch(NoSuchElementException e){
                  printer = " > Error: Could not find level.";
               }
            }else if(command.equals("getlevel")){
               printer = " > Level: " + game.getLevel();
            }else if(command.equals("level")){
               try{
                  printer = " > Level: " + levels[input.nextInt() - 1];
               }catch(InputMismatchException a){
                  printer = " > Error: Level type must be int.";
               }catch(ArrayIndexOutOfBoundsException b){
                  printer = " > Error: Level does not exist.";
               }
            }
            prompter.setText("");
            history.insert(printer + "\n",0);
         });
      window.add(prompter,BorderLayout.NORTH);
      window.add(history,BorderLayout.CENTER);
      return window;
   }
   private JTextField createCommandPrompter(){
      JTextField prompter = new JTextField();
      prompter.setFont(new Font(null,Font.PLAIN,18));
      return prompter;
   }
   private JTextArea createCommandHistory(){
      JTextArea history = new JTextArea();
      history.setFont(new Font(null,Font.PLAIN,16));
      history.setLineWrap(true);
      return history;
   }
   public void setPosition(int n, int pos){
      game.setPosition(n,pos);
      update();
   }
   public void setLevel(String level){
      game.setLevel(level);
      update();
   }
   private void update(){
      game.drawBoard();
      super.revalidate();
      super.repaint();
   }
   
   
   public static void main(String[] args){
      RushHourFrame frame = new RushHourFrame();
      frame.setVisible(true);
   }
}
